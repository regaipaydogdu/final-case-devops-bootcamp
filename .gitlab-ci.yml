stages:
  - build
  - package
  - deploy


Build The Application:
  stage: build
  image:
    name: node:current-alpine3.17
  tags:
    - react
  before_script:
    - cd ./docker/react-app
  script:
    - npm install
    - npm run build
  after_script:
    - mv ./docker/react-app/build ./build
  artifacts:
    when: on_success
    name: react-app-build
    paths:
      - ./build


Push Docker Image to DockerHub:
  image: docker:latest
  services:
    - docker:dind
  stage: package
  tags:
    - react
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  script:
    - docker build -t $DOCKER_IMAGE -f ./docker/Dockerfile .
    - docker tag $DOCKER_IMAGE $DOCKER_USERNAME/$DOCKER_IMAGE
    - docker push $DOCKER_USERNAME/$DOCKER_IMAGE
  after_script:
    - docker logout


Deploy Application to AWS wiith Terraform:
  stage: deploy
  tags:
    - react
  image:
    name: hashicorp/terraform:1.6.3
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - export TF_VAR_aws_access_key=$AWS_ACCESS_KEY_ID
    - export TF_VAR_aws_secret_key=$AWS_SECRET_ACCESS_KEY
    - rm -rf .terraform
    - cd ./terraform
    - terraform --version
    - terraform init
  script:
    - terraform validate
    - terraform plan -var-file=variables.tfvars
    - terraform apply -auto-approve -var-file=variables.tfvars
